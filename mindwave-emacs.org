* Interface Mindwave with emacs

#+begin_src emacs-lisp :tangle yes
;;; mindwave-emacs.el --- Neurosky mindwave support

;; Copyright (C) 2012 Jonathan Arkell

;; Author: Jonathan Arkell <jonnay@jonnay.net>
;; Created: 16 June 2012
;; Keywords: comint mindwave

;; This file is not part of GNU Emacs.
;; Released under the GPL     

#+end_src

mindwave-emacs is a chunk of elisp code that uses the ThinkGearConnector program to pass off mindwave data directly to emacs.

** Usage

*** Data Gathering Example

When you purchase a mindwave, it doesn't actually come with any long-termdata logging code, and while there is an open source tool to show your brainwaves on a graph, it again doesn't provide logging.

I wanted something simple that would provide that for me.

This chunk of code here illustrates how to use mindwave-emacs.  It will collect the eSense, eegPower and signal level into a table, that could theoretically be further processed into R, and then even plotted with various programs.

Note, that the code assumes that you want everything put in a buffer called ~Brain.org~.

#+begin_src emacs-lisp :tangle gather-into-org.el
  (defvar dg-mindwave/org-buffer "Brain.org")
  
  (defvar dg-mindwave/mark nil)
  
  (defun dg-mindwave/if-assoc (key lst)
    (if (assoc key lst)
        (number-to-string (cdr (assoc key lst)))
        " "))
  
  (defun dg-mindwave/get-in (lst key keylist)
    (let ((innerList (assoc key lst)))
      (mapconcat '(lambda (el)
                    (if (and innerList 
                             (assoc el innerList))
                         (number-to-string (cdr (assoc el innerList)))
                      "")) 
                 keylist
                 " | ")))
  
  (defun dg-mindwave/generic-mark ()
    "Used to generically mark a section of the table"
    (interactive)
    (dg-mindwave/mark "mark"))
  
  (defun dg-mindwave/mark (mark)
    "Set a mark on the section of a table"
    (setq dg-mindwave/mark mark))
  
  (defun dg-mindwave/collect-and-write (output)
    "Hook function to gather and write data to the table."
        (let* ((out (json-read-from-string output))
               (string-write (concat "| " 
                            (format-time-string "%s")
                            " | "
                            (dg-mindwave/if-assoc 'poorSignalLevel out) 
                            " | "
                            (dg-mindwave/get-in out 'eegPower '(highGamma lowGamma highBeta lowBeta highAlpha lowAlpha theta delta))
                            " | "
                            (dg-mindwave/get-in out 'eSense '(attention meditation))
                            " | "
                            (when dg-mindwave/mark
                              (let ((m dg-mindwave/mark))
                                (setq dg-mindwave/mark)
                                m))
                            " | "                          
                            "\n")))
          (with-current-buffer dg-mindwave/org-buffer 
            (goto-char (point-max))
            (insert string-write))))
  
  (defun dg-mindwave/start-recording-session (name)
    "Sets up an entirely new mindwave session for recording." 
    (interactive "sMindwave Session Name: ")
    (with-current-buffer dg-mindwave/org-buffer
      (goto-char (point-max))
      (insert "\n\n")
      (insert "*** ")
      (insert (current-time-string))
      (insert "  ")
      (insert name)
      (insert "\n")
      (insert "|------------+--------+-----------+----------+----------+---------+-----------+----------+--------+---------+------------+-----------+------|\n")
      (insert "|       time | signal | highGamma | lowGamma | highBeta | lowBeta | highAlpha | lowAlpha |  theta |   delta | meditation | attention | mark |\n")
      (insert  "|------------+--------+-----------+----------+----------+---------+-----------+----------+--------+---------+------------+-----------+------|\n"))
    (mindwave-get-buffer)
    (when (not (member 'dg-mindwave/collect-and-write 'mindwave-hook))
      (add-hook 'mindwave-hook 'dg-mindwave/collect-and-write)))
  
  (defun dg-mindwave/stop-recording-session ()
    "Stops a recording session"
    (interactive)
    (remove-hook 'mindwave-hook 'dg-mindwave/collect-and-write)
    )
  
#+end_src
**** Window for mark input
#+begin_src emacs-lisp 
  (defun dg-mindwave/create-input-buffer ()
    "Create an input buffer so that marks can be handled"
    (interactive)
    (pop-to-buffer (get-buffer-create "*mindwave-input*") )
    (local-set-key " " 'dg-mindwave/generic-mark)
    (local-set-key "a" '(lambda () (interactive) (dg-mindwave/mark "a")))
    (local-set-key "b" '(lambda () (interactive) (dg-mindwave/mark "b")))
    (local-set-key "c" '(lambda () (interactive) (dg-mindwave/mark "c")))
    (local-set-key "d" '(lambda () (interactive) (dg-mindwave/mark "d")))
    (local-set-key "e" '(lambda () (interactive) (dg-mindwave/mark "e")))
    (local-set-key "f" '(lambda () (interactive) (dg-mindwave/mark "f")))
    (local-set-key "g" '(lambda () (interactive) (dg-mindwave/mark "g")))
    (local-set-key "h" '(lambda () (interactive) (dg-mindwave/mark "h")))
    (local-set-key "i" '(lambda () (interactive) (dg-mindwave/mark "i")))
    (local-set-key "j" '(lambda () (interactive) (dg-mindwave/mark "j")))
    (local-set-key "k" '(lambda () (interactive) (dg-mindwave/mark "k")))
    (local-set-key "l" '(lambda () (interactive) (dg-mindwave/mark "l")))
    (local-set-key "m" '(lambda () (interactive) (dg-mindwave/mark "m")))
    (local-set-key "n" '(lambda () (interactive) (dg-mindwave/mark "n")))
    (local-set-key "o" '(lambda () (interactive) (dg-mindwave/mark "o")))
    (local-set-key "p" '(lambda () (interactive) (dg-mindwave/mark "p")))
    (local-set-key "q" '(lambda () (interactive) (dg-mindwave/mark "q")))
    (local-set-key "r" '(lambda () (interactive) (dg-mindwave/mark "r")))
    (local-set-key "s" '(lambda () (interactive) (dg-mindwave/mark "s")))
    (local-set-key "t" '(lambda () (interactive) (dg-mindwave/mark "t")))
    (local-set-key "u" '(lambda () (interactive) (dg-mindwave/mark "u")))
    (local-set-key "v" '(lambda () (interactive) (dg-mindwave/mark "v")))
    (local-set-key "w" '(lambda () (interactive) (dg-mindwave/mark "w")))
    (local-set-key "x" '(lambda () (interactive) (dg-mindwave/mark "x")))
    (local-set-key "y" '(lambda () (interactive) (dg-mindwave/mark "y")))
    (local-set-key "z" '(lambda () (interactive) (dg-mindwave/mark "z"))))
  
  
  
  (dg-mindwave/collect-and-write "{\"eSense\":{\"attention\":40,\"meditation\":54},\"eegPower\":{\"delta\":1101897,\"theta\":524907,\"lowAlpha\":102269,\"highAlpha\":84392,\"lowBeta\":71996,\"highBeta\":23369,\"lowGamma\":23140,\"highGamma\":6903},\"poorSignalLevel\":0}")
  
#+end_src


**** Timed marks

#+begin_src emacs-lisp
  (defun dg-mindwave/start-45-second-session (name) 
    "Start a 45 second session with appropriate marks.  NAME should be a simple name."
    (interactive "s45 Second Session Name:")
    (dg-mindwave/start-recording-session name)
    (run-at-time 15 nil '(lambda ()
                           (message "Close your Eyes and Relax")
                           (beep 1) 
                           (dg-mindwave/mark "relaxed")))
    (run-at-time 30 nil `(lambda ()
                           (message name)
                           (beep 1)
                           (dg-mindwave/mark ,name)))
    (run-at-time 45 nil '(lambda ()
                           (beep 1)
                           (message "stop")
                           (dg-mindwave/stop-recording-session))))
#+end_src

*** Basic testing code

This is the test code that I have been using, just to make sure the code below works.

#+begin_src emacs-lisp :tangle no
(mindwave-get-buffer)
(mindwave-get-raw nil)
(mindwave-get-raw t)

(setq mindwave-hook nil)
(setq mindwave-raw-hook '())
(setq mindwave-blink-hook '())

(run-hook-with-args 'mindwave-blink-hook "foo")

(add-hook 'mindwave-hook 'mindwave-debug-standard)
(add-hook 'mindwave-raw-hook 'mindwave-debug-raw)
(add-hook 'mindwave-blink-hook 'mindwave-debug-blink)

(defun mindwave-debug-standard  (o) (message "Standard output: %S" o))
(defun mindwave-debug-raw (o) (message "Raw: %S" o))
(defun mindwave-debug-blink (o) (message "Blink: %S" o))
#+end_src

(current-time)

* Basic Houst keeping


#+begin_src emacs-lisp :tangle yes
(require 'json)
#+end_src

** Set up the client
*** Basic constants
#+begin_src emacs-lisp :tangle yes
  (defvar mindwave-host "localhost")
  (defvar mindwave-port 13854)
  
  (defvar mindwave-appName "mindwave-emacs")
  (defvar mindwave-appKey (sha1 mindwave-appName))
#+end_src

*** Connection
**** Connection variables

#+begin_src emacs-lisp :tangle yes
(defvar mindwave-buffer nil "Variable to store the buffer connected to the process")
(defvar mindwave-process nil "Process that mindwave is connected")
#+end_src

**** Return lowlevel connection variables 
According to the documentation of make-comint, if a running process is on the buffer, it is not restarted.  So isntead of trying to maintain state, lets just return the existing process that way.
 
#+begin_src emacs-lisp :tangle yes
  (defun mindwave-get-buffer ()
    "Returns the buffer for the mindwave connection"
    (if (and mindwave-process (process-live-p mindwave-process))
        mindwave-process
        (progn
    (setq mindwave-buffer (make-comint "mindwave" (cons mindwave-host mindwave-port)))
    (setq mindwave-process (get-buffer-process mindwave-buffer))
    (save-excursion
      (set-buffer mindwave-buffer)
      (sleep-for 1)
      (mindwave-authorize)
      (sleep-for 1)
      (mindwave-get-raw nil)
      (sleep-for 1)
      (add-hook 'comint-output-filter-functions 'mindwave-comint-filter-function nil t))
    mindwave-buffer)))
  
#+end_src

*** Sending Data
#+begin_src emacs-lisp :tangle yes
(defun mindwave-send-string (str)
  "Helper function to send STRING directly to the mindwave.
Please use `mindwave-authorize' or `mindwave-get-raw' for user-level configuration."
  (comint-send-string mindwave-process str))
#+end_src
*** Recieving Data

Mindwave emacs sets up 3 hooks:  
*** The hooks
**** ~mindwave-hook~
Called whenever there is a packet that mindwave emacs doesn't natively understand.  The standard 1-packet-per-second packet is an example of this:
#+begin_src json
{
  "eSense":{
    "attention":47,
    "meditation":66
  },
  "eegPower":{
    "delta":4479,
    "theta":42897,
    "lowAlpha":6952,
    "highAlpha":21261,
    "lowBeta":14623,
    "highBeta":5238,
    "lowGamma":2546,
    "highGamma":2512
  },
  "poorSignalLevel":0
}
#+end_src
**** ~mindwave-blink-hook~
Called whenever the mindwave detects a blink.

**** ~mindwave-raw-hook~ 
Called for when raw packet data is recieved.  Note that many raw packets are recieved at a time, so teh hook is fed an array of strings.  Each string being the numeric raw value.

Note that due to the buffering involved, I am not so sure how much value there really is in the raw eeg value.  

*** Low level details for the hooks 
#+begin_src emacs-lisp :tangle yes
(defvar mindwave-hook '() "Hooks to run when mindwave gets standard input")
(defvar mindwave-blink-hook '() "Hooks to run when mindwave gets blink input")
(defvar mindwave-raw-hook '() "Hooks to run when mindwave gets raw input")
#+end_src


#+begin_src emacs-lisp :tangle yes
  (defun mindwave-comint-filter-function (output)
    "A helper hook to pass off output to the apropriate hooks"
    (let ((collected-raw '()))
      (loop for out 
            in (split-string output "\C-j" t)
            do
            (cond ((and (> (length out) 10) 
                        (string-equal (substring out 0 10) "{\"rawEeg\":"))
                   (setq collected-raw (cons (substring out 10 -1) collected-raw)))
                  
                  ((and (> (length out) 17) 
                        (string-equal (substring out 0 17) "{\"blinkStrength\":"))
                   (run-hook-with-args 'mindwave-blink-hook (substring out 17 -2)))
                  
                  ((string-equal "{" (substring out 0 1))
                   (run-hook-with-args 'mindwave-hook out))))
      (when (> (length collected-raw) 0)
        (run-hook-with-args 'mindwave-raw-hook collected-raw)))
    output)
#+end_src

** TODO Ask for authorisation

#+begin_src emacs-lisp :tangle yes
(defvar mindwave-authorized-p nil "whether or not app is authorized")
#+end_src 

#+begin_src emacs-lisp :tangle yes
(defun mindwave-authorize () 
  "provides an autorization request to the mindwave server"
  (mindwave-send-string (json-encode `(("appName" . ,mindwave-appName) 
                                       ("appKey" . ,mindwave-appKey)))))
#+end_src

#+begin_src emacs-lisp
(defun mindwave-authorized-hook (out)
  "test"
  ;(message "Authorize listener: %s" out)
)
#+end_src

** Configure
*** Ask for raw output
#+begin_src emacs-lisp :tangle yes
(defun mindwave-get-raw (raw)
  "Return raw output from mindwave.
RAW is a boolean value as to whether or not to listen for raw values"
  (mindwave-send-string (json-encode `(("enableRawOutput" . ,(if raw t json-false))
                                      ("format" . "Json")))))
#+end_src

#+begin_src 
;;; mindwave-emacs.el ends here
#+end_src

* Output Examples

#+tblname: success
|------------+--------+-----------+----------+----------+---------+-----------+----------+--------+---------+------------+-----------+---------|
|       time | signal | highGamma | lowGamma | highBeta | lowBeta | highAlpha | lowAlpha |  theta |   delta | meditation | attention | mark    |
|------------+--------+-----------+----------+----------+---------+-----------+----------+--------+---------+------------+-----------+---------|
| 1340229522 |      0 |      6715 |     8839 |     7397 |   12358 |      9428 |    19939 |  21762 |   45012 |         83 |        40 |         |
| 1340229523 |      0 |      5293 |     7680 |    21524 |    6436 |      7380 |    36453 |  31707 |   61168 |         83 |        61 |         |
| 1340229524 |      0 |      2659 |    11910 |     8315 |    3606 |      4350 |    12728 |   6604 |   20185 |         78 |        69 |         |
| 1340229525 |      0 |     42703 |    39375 |    36054 |  133924 |    211462 |   100667 | 576943 |  644892 |         53 |        74 |         |
| 1340229526 |      0 |     13471 |     7929 |    14365 |   62578 |     20617 |     4383 | 256884 |  906958 |         44 |        51 |         |
| 1340229527 |      0 |      2271 |     6518 |     6288 |   13430 |     28688 |     8927 |  90855 | 1118085 |         29 |        44 |         |
| 1340229528 |      0 |      4299 |     5690 |     6973 |    7985 |      8977 |    15999 |  69443 |  114812 |         14 |        34 |         |
| 1340229529 |      0 |      2968 |     6811 |     6179 |    8471 |      8756 |     4000 |  55889 |   74533 |         21 |        24 |         |
| 1340229530 |      0 |      1704 |     6543 |     9922 |    2012 |      1750 |    23099 |  14680 |   90702 |         35 |        50 |         |
| 1340229531 |      0 |      2809 |     2879 |     6017 |   15968 |      7552 |     9412 |   5696 |   71379 |         50 |        56 |         |
| 1340229532 |      0 |      7705 |     6187 |     7244 |   16578 |     31379 |    12079 | 148379 |   60969 |         44 |        54 |         |
| 1340229533 |      0 |      5949 |     8210 |     8594 |    6521 |     13802 |    30518 |  39344 |   25372 |         47 |        69 |         |
| 1340229534 |      0 |      7649 |     4027 |     9078 |    5012 |      4273 |    18162 |  22758 |   38168 |         43 |        63 |         |
| 1340229535 |      0 |      1678 |     2017 |     3799 |    6433 |      3366 |     4245 |  29764 |    5899 |         35 |        51 |         |
| 1340229536 |      0 |      1189 |     6646 |     3084 |    3522 |      4005 |     6985 |  14239 |   82198 |         44 |        57 |         |
| 1340229537 |      0 |      2112 |     9706 |    33960 |   14244 |     26535 |    16577 |  23013 |   21533 |         60 |        56 |         |
| 1340229538 |      0 |      1905 |     1391 |     8818 |    6341 |     13640 |     4823 |  22706 |   12155 |         60 |        54 | relaxed |
| 1340229539 |      0 |      1894 |     8464 |     9669 |    4472 |      5817 |    10351 |  12945 |    2834 |         70 |        66 |         |
| 1340229540 |      0 |      1597 |     3099 |    21082 |    1943 |      8788 |     8036 |  30336 |    6669 |         81 |        61 |         |
| 1340229541 |      0 |      1861 |     5657 |    13161 |    5321 |     12381 |     2265 |  15898 |   11400 |         81 |        57 |         |
| 1340229542 |      0 |      1538 |     1899 |     6201 |    5171 |      3724 |     6658 |   1750 |    6385 |         90 |        63 |         |
| 1340229543 |      0 |      1692 |     3044 |     5080 |    5368 |      5631 |     1747 |   7145 |    3333 |         90 |        60 |         |
| 1340229544 |      0 |      2217 |     3062 |     4332 |    6559 |      3085 |     7375 |  21089 |   19816 |         78 |        60 |         |
| 1340229546 |      0 |      2564 |     2950 |     3733 |    7312 |      5809 |    18199 |   5943 |   10327 |         57 |        61 |         |
| 1340229547 |      0 |      2400 |     5140 |     5839 |    7216 |      8070 |     6510 |  13131 |    2961 |         53 |        64 |         |
| 1340229548 |      0 |      1836 |     1461 |    10593 |    1334 |     21543 |     5324 |  43509 |   71069 |         53 |        69 |         |
| 1340229549 |      0 |      2358 |     3557 |     4657 |    4135 |      1947 |     3002 |   8021 |    1432 |         57 |        67 |         |
| 1340229550 |      0 |      1662 |     1694 |     3111 |    3296 |      2404 |     7591 |   5451 |    6358 |         63 |        63 |         |
| 1340229551 |      0 |       935 |     3135 |     8643 |    5870 |      6242 |     2730 |   6181 |    1459 |         70 |        60 |         |
| 1340229552 |      0 |      1835 |     3510 |     4576 |    7218 |      2036 |     2749 |   4368 |    7480 |         81 |        54 |         |
| 1340229553 |      0 |      1021 |     3251 |     5087 |    5483 |      2280 |     6480 |  11058 |   16476 |         78 |        57 | another |
| 1340229554 |      0 |      2565 |     1468 |    10513 |   12150 |     21771 |    16130 |  21917 |   17520 |         78 |        60 |         |
| 1340229555 |      0 |      5049 |     2925 |    14554 |    9252 |      8270 |     2454 |  74591 |    5747 |         66 |        44 |         |
| 1340229556 |      0 |      2296 |     2791 |     2779 |    2551 |      1375 |     2614 |  29351 |   40429 |         50 |        37 |         |
| 1340229557 |      0 |      2762 |     2659 |     6519 |    7152 |      4360 |    10126 |   3559 |    5185 |         53 |        43 |         |
| 1340229558 |      0 |      2613 |     1409 |     4049 |    2419 |      4784 |     3381 |   4948 |   10097 |         57 |        40 |         |
| 1340229559 |      0 |       438 |     1616 |     1297 |    4130 |      2317 |     6057 |  12810 |  184162 |         50 |        56 |         |
| 1340229560 |      0 |      1976 |     2660 |     7300 |    5489 |      5101 |     3020 |  10564 |   13617 |         64 |        67 |         |
| 1340229561 |      0 |      3559 |     4133 |     6696 |    5934 |      2822 |    23207 |   8103 |   15320 |         57 |        70 |         |
| 1340229562 |      0 |       812 |     3373 |     3133 |    7703 |     17726 |     6897 |  54966 |  143420 |         40 |        64 |         |
| 1340229563 |      0 |      6667 |     6829 |    10165 |   25519 |     24609 |    85072 | 240138 |  198194 |         34 |        61 |         |
| 1340229564 |      0 |      2952 |     8474 |    20454 |    8014 |      8553 |    32825 | 154300 |  936155 |         20 |        57 |         |
| 1340229565 |      0 |      3875 |     3082 |     9643 |    5095 |      6947 |     5616 |  24947 |   59565 |         23 |        44 |         |
| 1340229566 |      0 |      6780 |     8592 |     9355 |    1226 |     27212 |     6227 |  18259 |   70961 |         37 |        56 |         |
| 1340229567 |      0 |      5022 |     5286 |     8248 |   11726 |     21470 |    15820 |  25245 |   41331 |         51 |        63 |         |
#+begin_src gnuplot :var data=success :exports code :file success.png
reset
set terminal png size 1024,800

set multiplot layout 7,1


unset title

set tmargin 0
set bmargin 0
set lmargin 8
set rmargin 2

set grid

set xtics format ""

set ylabel "EEG"
set ytics 

set yrange [0 to 2000000]
plot data u 1:10 w lines title 'D' axis x1y1 lt rgb '#0000cc'
plot data u 1:9 w lines title 'T' axis x1y1 lt rgb '#0000ff'
set yrange [0 to 100000]
plot data u 1:8 w lines title '+A' lt rgb '#00ffff', data u 1:7 with lines title '-A'  lt rgb '#0088ff' 
plot data u 1:6 w lines title '+B' lt rgb '#00aa00', data u 1:5 with lines title '-B'  lt rgb '#00ff00'
plot data u 1:4 w lines title '+G' lt rgb '#ff0000', data u 1:3 with lines title '-G'  lt rgb '#ffaa00'

set xlabel "Time"

set yrange [0 to 100]

plot data u 1:11 lt rgb '#00cccc' w lines title 'eM' axis x1y1, \
     data u 1:12 lt rgb '#ffcc00' w lines title 'eA' axis x1y1 

unset multiplot
#+end_src

